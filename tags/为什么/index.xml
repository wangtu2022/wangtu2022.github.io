<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>为什么 on 煎鱼</title>
    <link>https://wangtu2022.github.io/tags/%E4%B8%BA%E4%BB%80%E4%B9%88/</link>
    <description>Recent content in 为什么 on 煎鱼</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 31 Dec 2021 12:55:16 +0800</lastBuildDate><atom:link href="https://wangtu2022.github.io/tags/%E4%B8%BA%E4%BB%80%E4%B9%88/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 为什么不支持函数重载和参数默认值？</title>
      <link>https://wangtu2022.github.io/posts/go/func-reload/</link>
      <pubDate>Fri, 31 Dec 2021 12:55:16 +0800</pubDate>
      
      <guid>https://wangtu2022.github.io/posts/go/func-reload/</guid>
      <description>大家好，我是煎鱼。
大家在初学习 Go 语言时，带着其他语言的习惯，总是会有些不习惯，感觉非常不能理解，直打问号。
其中一点就是 Go 语言不支持函数重载和参数默认值，觉得使用起来很不方便。
为此，在这篇文章中煎鱼就和大家一起来了解为什么，有又会怎么样。
函数重载 函数重载（function overloading），也叫方法重载。是某些编程语言（如 C++、C#、Java、Swift、Kotlin 等）具有的一项特性。
该特性允许创建多个具有不同实现的同名函数，对重载函数的调用会运行其适用于调用上下文的具体实现。
从功能上来讲，就是允许一个函数调用根据上下文执行不同的方法，达到调用同一个函数名，执行不同的方法。
一个简单的例子：
#include &amp;lt;iostream&amp;gt; int Volume(int s) { // 立方体的体积。 return s * s * s; } double Volume(double r, int h) { // 圆柱体的体积。 return 3.</description>
    </item>
    
    <item>
      <title>为什么 Go 不支持循环引用？</title>
      <link>https://wangtu2022.github.io/posts/go/import-cyc/</link>
      <pubDate>Fri, 31 Dec 2021 12:55:15 +0800</pubDate>
      
      <guid>https://wangtu2022.github.io/posts/go/import-cyc/</guid>
      <description>大家好，我是煎鱼。
近年来开始学习 Go 语言的开发者越来越多了。很多小伙伴在使用时，就会遇到种种不理解的问题。
其中一点就是循环引入的报错：
package command-line-arguments imports github.com/eddycjy/awesome-project/a imports github.com/eddycjy/awesome-project/b imports github.com/eddycjy/awesome-project/a: import cycle not allowed 为什么 Go 不支持循环引用呢，这就很不解了，难道还影响性能了？
今天煎鱼将和大家一起了解背后的原因。
案例演示 做一个基本的案例 Demo，便于没接触过的同学建立初步认知。我们的程序分别有 2 个 package。
package a 的代码如下：</description>
    </item>
    
    <item>
      <title>Go：我有注解，Java：不，你没有！</title>
      <link>https://wangtu2022.github.io/posts/go/annotation/</link>
      <pubDate>Fri, 31 Dec 2021 12:55:11 +0800</pubDate>
      
      <guid>https://wangtu2022.github.io/posts/go/annotation/</guid>
      <description>大家好，我是煎鱼。
作为一位 Go 程序员，你会发现身边的同事大多都拥有其他语言的编写经验。那势必就会遇到一点，要把新学到的知识和以前的知识建立连接。
特殊在于，Go 有些特性是其他语言有，他没有的。最经典的就是 N 位 Java 同学寻找 Go 语言的注解在哪里，总要解释。
为此，今天煎鱼就带大家了解一下 Go 语言的注解的使用和情况。
什么是注解 了解历史 注解（Annotation）最早出现自何处，翻了一圈并没有找到。但可以明确，在注解的使用中，Java 注解最为经典，为了便于理解，因此我们基于 Java 做初步的注解理解。
在 2002 年，JSR-175 提出了 《A Metadata Facility for the Java Programming Language》，也就是为 Java 编程语言提供元数据工具。</description>
    </item>
    
    <item>
      <title>Go 凭什么不支持三元运算符？</title>
      <link>https://wangtu2022.github.io/posts/go/ternary-operator/</link>
      <pubDate>Fri, 31 Dec 2021 12:54:50 +0800</pubDate>
      
      <guid>https://wangtu2022.github.io/posts/go/ternary-operator/</guid>
      <description>大家好，我是煎鱼。
这是一个很多其他语言工程师转 Go 语言的时间节点，这就难免不论一番比较。其中一个经典的运算上的就是 “三元运算符”：
为什么 Go 语言不支持三元运算符，Go 不支持三元运算符就是设计的不好，是历史在开倒车吗？
今天就由煎鱼来和大家一起摸索为什么。
三元运算符是什么 三元运算符，在典型的数学意义上，或者从解析器的角度来看，是一个需要三个参数的运算符。而我们日常中，最常见的是二元运算符：
x + y x / y x * y 还有一元运算符：
-a ~b !c 以及今天的男主角 “三元运算符”。在 C/C++ 等多种语言中，我们可以根据条件声明和初始化变量的习惯来选择性使用三元条件运算符：
int index = val &amp;gt; 0 ?</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>grpc on 煎鱼</title>
    <link>https://wangtu2022.github.io/tags/grpc/</link>
    <description>Recent content in grpc on 煎鱼</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 20 Oct 2018 12:00:00 +0000</lastBuildDate><atom:link href="https://wangtu2022.github.io/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「连载十」分布式链路追踪 gRPC &#43; Opentracing &#43; Zipkin</title>
      <link>https://wangtu2022.github.io/posts/go/grpc/2018-10-20-zipkin/</link>
      <pubDate>Sat, 20 Oct 2018 12:00:00 +0000</pubDate>
      
      <guid>https://wangtu2022.github.io/posts/go/grpc/2018-10-20-zipkin/</guid>
      <description>在实际应用中，你做了那么多 Server 端，写了 N 个 RPC 方法。想看看方法的指标，却无处下手？
本文将通过 gRPC + Opentracing + Zipkin 搭建一个分布式链路追踪系统来实现查看整个系统的链路、性能等指标。
Opentracing 是什么 OpenTracing 通过提供平台无关、厂商无关的API，使得开发人员能够方便的添加（或更换）追踪系统的实现
不过 OpenTracing 并不是标准。因为 CNCF 不是官方标准机构，但是它的目标是致力为分布式追踪创建更标准的 API 和工具
名词解释 Trace 一个 trace 代表了一个事务或者流程在（分布式）系统中的执行过程</description>
    </item>
    
    <item>
      <title>「连载九」gRPC Deadlines</title>
      <link>https://wangtu2022.github.io/posts/go/grpc/2018-10-16-deadlines/</link>
      <pubDate>Tue, 16 Oct 2018 12:00:00 +0000</pubDate>
      
      <guid>https://wangtu2022.github.io/posts/go/grpc/2018-10-16-deadlines/</guid>
      <description>前言 在前面的章节中，已经介绍了 gRPC 的基本用法。那你想想，让它这么裸跑真的没问题吗？
那么，肯定是有问题了。今天将介绍 gRPC Deadlines 的用法，这一个必备技巧。内容也比较简单
Deadlines Deadlines 意指截止时间，在 gRPC 中强调 TL;DR（Too long, Don&amp;rsquo;t read）并建议始终设定截止日期，为什么呢？
为什么要设置 当未设置 Deadlines 时，将采用默认的 DEADLINE_EXCEEDED（这个时间非常大）
如果产生了阻塞等待，就会造成大量正在进行的请求都会被保留，并且所有请求都有可能达到最大超时
这会使服务面临资源耗尽的风险，例如内存，这会增加服务的延迟，或者在最坏的情况下可能导致整个进程崩溃
gRPC Client func main() { ... ctx, cancel := context.</description>
    </item>
    
    <item>
      <title>「连载八」对 RPC 方法做自定义认证</title>
      <link>https://wangtu2022.github.io/posts/go/grpc/2018-10-14-per-rpc-credentials/</link>
      <pubDate>Sun, 14 Oct 2018 12:00:00 +0000</pubDate>
      
      <guid>https://wangtu2022.github.io/posts/go/grpc/2018-10-14-per-rpc-credentials/</guid>
      <description>前言 在前面的章节中，我们介绍了两种（证书算一种）可全局认证的方法：
TLS 证书认证 基于 CA 的 TLS 证书认证 Unary and Stream interceptor 而在实际需求中，常常会对某些模块的 RPC 方法做特殊认证或校验。今天将会讲解、实现这块的功能点
课前知识 type PerRPCCredentials interface { GetRequestMetadata(ctx context.Context, uri ...string) (map[string]string, error) RequireTransportSecurity() bool } 在 gRPC 中默认定义了 PerRPCCredentials，它就是本章节的主角，是 gRPC 默认提供用于自定义认证的接口，它的作用是将所需的安全认证信息添加到每个 RPC 方法的上下文中。其包含 2 个方法：</description>
    </item>
    
    <item>
      <title>「连载七」让你的服务同时提供 HTTP 接口</title>
      <link>https://wangtu2022.github.io/posts/go/grpc/2018-10-12-grpc-http/</link>
      <pubDate>Fri, 12 Oct 2018 12:00:00 +0000</pubDate>
      
      <guid>https://wangtu2022.github.io/posts/go/grpc/2018-10-12-grpc-http/</guid>
      <description>前言 接口需要提供给其他业务组访问，但是 RPC 协议不同无法内调，对方问能否走 HTTP 接口，怎么办？
微信（公众号、小程序）等第三方回调接口只支持 HTTP 接口，怎么办
我相信你在实际工作中都会遇到如上问题，在 gRPC 中都是有解决方案的，本章节将会进行介绍 🤔
为什么可以同时提供 HTTP 接口 关键一点，gRPC 的协议是基于 HTTP/2 的，因此应用程序能够在单个 TCP 端口上提供 HTTP/1.1 和 gRPC 接口服务（两种不同的流量）
怎么同时提供 HTTP 接口 检测协议 if r.</description>
    </item>
    
    <item>
      <title>「连载六」Unary and Stream interceptor</title>
      <link>https://wangtu2022.github.io/posts/go/grpc/2018-10-10-interceptor/</link>
      <pubDate>Wed, 10 Oct 2018 12:00:00 +0000</pubDate>
      
      <guid>https://wangtu2022.github.io/posts/go/grpc/2018-10-10-interceptor/</guid>
      <description>前言 我想在每个 RPC 方法的前或后做某些事情，怎么做？
本章节将要介绍的拦截器（interceptor），就能帮你在合适的地方实现这些功能。
有几种方法 在 gRPC 中，大类可分为两种 RPC 方法，与拦截器的对应关系是：
普通方法：一元拦截器（grpc.UnaryInterceptor） 流方法：流拦截器（grpc.StreamInterceptor） 看一看 grpc.UnaryInterceptor func UnaryInterceptor(i UnaryServerInterceptor) ServerOption { return func(o *options) { if o.unaryInt != nil { panic(&amp;#34;The unary server interceptor was already set and may not be reset.</description>
    </item>
    
    <item>
      <title>「连载五」基于 CA 的 TLS 证书认证</title>
      <link>https://wangtu2022.github.io/posts/go/grpc/2018-10-08-ca-tls/</link>
      <pubDate>Mon, 08 Oct 2018 12:00:00 +0000</pubDate>
      
      <guid>https://wangtu2022.github.io/posts/go/grpc/2018-10-08-ca-tls/</guid>
      <description>前言 在上一章节中，我们提出了一个问题。就是如何保证证书的可靠性和有效性？你如何确定你 Server、Client 的证书是对的呢？
CA 为了保证证书的可靠性和有效性，在这里可引入 CA 颁发的根证书的概念。其遵守 X.509 标准
根证书 根证书（root certificate）是属于根证书颁发机构（CA）的公钥证书。我们可以通过验证 CA 的签名从而信任 CA ，任何人都可以得到 CA 的证书（含公钥），用以验证它所签发的证书（客户端、服务端）
它包含的文件如下：
公钥 密钥 生成 Key openssl genrsa -out ca.key 2048 生成密钥 openssl req -new -x509 -days 7200 -key ca.</description>
    </item>
    
    <item>
      <title>「连载四」TLS 证书认证</title>
      <link>https://wangtu2022.github.io/posts/go/grpc/2018-10-07-grpc-tls/</link>
      <pubDate>Sun, 07 Oct 2018 12:00:00 +0000</pubDate>
      
      <guid>https://wangtu2022.github.io/posts/go/grpc/2018-10-07-grpc-tls/</guid>
      <description>前言 在前面的章节里，我们介绍了 gRPC 的四种 API 使用方式。是不是很简单呢 😀
此时存在一个安全问题，先前的例子中 gRPC Client/Server 都是明文传输的，会不会有被窃听的风险呢？
从结论上来讲，是有的。在明文通讯的情况下，你的请求就是裸奔的，有可能被第三方恶意篡改或者伪造为“非法”的数据
抓个包 嗯，明文传输无误。这是有问题的，接下将改造我们的 gRPC，以便于解决这个问题 😤
证书生成 私钥 openssl ecparam -genkey -name secp384r1 -out server.key 自签公钥 openssl req -new -x509 -sha256 -key server.</description>
    </item>
    
    <item>
      <title>「连载三」gRPC Streaming, Client and Server</title>
      <link>https://wangtu2022.github.io/posts/go/grpc/2018-09-24-stream-client-server/</link>
      <pubDate>Mon, 24 Sep 2018 12:00:00 +0000</pubDate>
      
      <guid>https://wangtu2022.github.io/posts/go/grpc/2018-09-24-stream-client-server/</guid>
      <description>前言 本章节将介绍 gRPC 的流式，分为三种类型：
Server-side streaming RPC：服务器端流式 RPC Client-side streaming RPC：客户端流式 RPC Bidirectional streaming RPC：双向流式 RPC 流 任何技术，因为有痛点，所以才有了存在的必要性。如果您想要了解 gRPC 的流式调用，请继续
图 gRPC Streaming 是基于 HTTP/2 的，后续章节再进行详细讲解
为什么不用 Simple RPC 流式为什么要存在呢，是 Simple RPC 有什么问题吗？通过模拟业务场景，可得知在使用 Simple RPC 时，有如下问题：</description>
    </item>
    
    <item>
      <title>「连载二」gRPC Client and Server</title>
      <link>https://wangtu2022.github.io/posts/go/grpc/2018-09-23-client-and-server/</link>
      <pubDate>Sun, 23 Sep 2018 12:30:00 +0000</pubDate>
      
      <guid>https://wangtu2022.github.io/posts/go/grpc/2018-09-23-client-and-server/</guid>
      <description>前言 本章节将使用 Go 来编写 gRPC Server 和 Client，让其互相通讯。在此之上会使用到如下库：
google.golang.org/grpc github.com/golang/protobuf/protoc-gen-go 安装 gRPC go get -u google.golang.org/grpc Protocol Buffers v3 wget https://github.com/google/protobuf/releases/download/v3.5.1/protobuf-all-3.5.1.zip unzip protobuf-all-3.5.1.zip cd protobuf-3.5.1/ ./configure make make install 检查是否安装成功</description>
    </item>
    
    <item>
      <title>「连载一」gRPC及相关介绍</title>
      <link>https://wangtu2022.github.io/posts/go/grpc/2018-09-22-install/</link>
      <pubDate>Sat, 22 Sep 2018 12:00:00 +0000</pubDate>
      
      <guid>https://wangtu2022.github.io/posts/go/grpc/2018-09-22-install/</guid>
      <description>项目地址：https://github.com/EDDYCJY/go-grpc-example
作为开篇章，将会介绍 gRPC 相关的一些知识。简单来讲 gRPC 是一个 基于 HTTP/2 协议设计的 RPC 框架，它采用了 Protobuf 作为 IDL
你是否有过疑惑，它们都是些什么？本文将会介绍一些常用的知识和概念，更详细的会给出手册地址去深入
一、RPC 什么是 RPC RPC 代指远程过程调用（Remote Procedure Call），它的调用包含了传输协议和编码（对象序列号）协议等等。允许运行于一台计算机的程序调用另一台计算机的子程序，而开发人员无需额外地为这个交互作用编程
实际场景： 有两台服务器，分别是 A、B。在 A 上的应用 C 想要调用 B 服务器上的应用 D，它们可以直接本地调用吗？</description>
    </item>
    
  </channel>
</rss>
